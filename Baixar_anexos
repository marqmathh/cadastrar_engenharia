from httpcore import TimeoutException
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
import tkinter as tk
from tkinter import messagebox, ttk
import os, shutil, win32com.client, time, ctypes, pyautogui, math, requests, rarfile, patoolib
from datetime import datetime
import pandas as pd
from openpyxl import load_workbook
from openpyxl.worksheet.table import Table, TableStyleInfo
from openpyxl.styles import Border, Side
from sqlalchemy import create_engine, Column, Integer, String, Float
from sqlalchemy.orm import sessionmaker, declarative_base

def baixar_desenhos():
    def entrar_lm_e_enviar_para_o_excel():
        servico = Service(ChromeDriverManager().install())
        navegador = webdriver.Chrome(service=servico) 
        usuario = entry_usuario.get() 
        senha = entry_senha.get()
        op = entry_op.get()

        def login(usuario, senha):
            tela_usuario = WebDriverWait(navegador, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="campologin"]')))
            tela_usuario.send_keys(usuario)
            tela_senha = WebDriverWait(navegador, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="login_form"]/div/main/div/section[3]/div[2]/input')))
            tela_senha.send_keys(senha)    
            tela_senha.send_keys(Keys.RETURN)

        def entrar_nomus():
            navegador.get('https://tspro.nomus.com.br/tspro/Login.do?metodo=PreLogin') # Tela inicial
            login(usuario, senha)

        def tela_ordens():
            navegador.get('https://tspro.nomus.com.br/tspro/Ordem.do?metodo=pesquisarPaginado') # Produtos

        def entra_ordem(op):
            botao_buscar = WebDriverWait(navegador, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="botao_exibir_todos"]'))) # Buscar produtos
            botao_buscar.click()
            produto_01 = WebDriverWait(navegador, 10).until(EC.element_to_be_clickable((By.XPATH, "/html/body/div[2]/div[4]/div/form/div[6]/table/tbody/tr[2]/td/table/tbody/tr[2]/td/div/table/tbody/tr[2]/td[1]/input"))) # Código do produto
            produto_01.send_keys(op)
            botao_buscar = WebDriverWait(navegador, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="botao_pesquisarpaginado"]'))) # Buscar produtos
            botao_buscar.click()
            botao_buscar = WebDriverWait(navegador, 10).until(EC.element_to_be_clickable((By.XPATH, f"//*[text()='{op}']"))) #Seleciona o elemento
            botao_buscar.click()
            botao_buscar_01 = WebDriverWait(navegador, 10).until(EC.element_to_be_clickable((By.XPATH, "//*[contains(@id, '_itemSubMenu_gerarZipArquivosAnexosOrdem')]"))) # Buscar produtos
            botao_buscar_01.click()
            time.sleep(5)
            botao_buscar = WebDriverWait(navegador, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="marcaredesmarcar"]'))) # Buscar produtos
            botao_buscar.click()
            time.sleep(0.5)
            botao_buscar = WebDriverWait(navegador, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="botao_Acoes"]'))) # Buscar produtos
            botao_buscar.click()
            time.sleep(0.5)
            botao_buscar = WebDriverWait(navegador, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="botao_botao.gerarpdfordensemlote"]'))) # Buscar produtos
            botao_buscar.click()
            time.sleep(5)
            navegador.quit()

        def winrar():
            def extrair_arquivos(arquivo_rar, pasta_destino):
                try:
                    temp_pasta = os.path.join(pasta_destino, "temp")
                    os.makedirs(temp_pasta, exist_ok=True)
                    patoolib.extract_archive(arquivo_rar, outdir=temp_pasta)
                    for root, _, files in os.walk(temp_pasta):
                        for file in files:
                            origem = os.path.join(root, file)
                            destino = os.path.join(pasta_destino, file)
                            if os.path.exists(destino):
                                nome, extensao = os.path.splitext(file)
                                contador = 1
                                novo_nome = f"{nome}_{contador}{extensao}"
                                while os.path.exists(os.path.join(pasta_destino, novo_nome)):
                                    contador += 1
                                    novo_nome = f"{nome}_{contador}{extensao}"
                                destino = os.path.join(pasta_destino, novo_nome)
                            shutil.move(origem, destino)
                    shutil.rmtree(temp_pasta)
                    print(f"Arquivos extraídos de {arquivo_rar} para {pasta_destino}.")
                except Exception as e:
                    print(f"Erro ao extrair {arquivo_rar}: {e}")
            pasta_downloads = os.path.expanduser("~/Downloads")
            pasta_destino = os.path.join(pasta_downloads, "Extraidos")
            os.makedirs(pasta_destino, exist_ok=True)
            for arquivo in os.listdir(pasta_downloads):
                if arquivo.endswith(".rar") or arquivo.endswith(".zip"):
                    caminho_arquivo = os.path.join(pasta_downloads, arquivo)
                    extrair_arquivos(caminho_arquivo, pasta_destino)
            for arquivo in os.listdir(pasta_downloads):
                caminho_arquivo = os.path.join(pasta_downloads, arquivo)
                try:
                    if os.path.isfile(caminho_arquivo):
                        os.remove(caminho_arquivo)
                        print(f"Deletado: {caminho_arquivo}")
                except Exception as e:
                    print(f"Erro ao deletar {caminho_arquivo}: {e}")

        entrar_nomus()
        tela_ordens()
        entra_ordem(op)
        winrar()

    app = tk.Tk()
    app.title("Engenharia")
    app.geometry("400x300")
    app.config(bg="lightblue")  

    tk.Label(app, text="Selecione a opção desejada: ", font=("Arial", 14), bg="lightblue").pack(pady=5)
    label_op = tk.Label(app, text="Código Pai:", bg="lightblue")
    label_op.pack(padx=5, pady=5)

    entry_op = tk.Entry(app, bg="white", bd=2, relief="solid", justify="center")
    entry_op.pack(padx=5, pady=5)

    label_usuario = tk.Label(app, text="Usuário:", bg="lightblue")
    label_usuario.pack(padx=5, pady=5)

    entry_usuario = tk.Entry(app, bg="white", bd=2, relief="solid", justify="center")
    entry_usuario.pack(padx=5, pady=5)

    label_senha = tk.Label(app, text="Senha:",  bg="lightblue")
    label_senha.pack(padx=5, pady=5)

    entry_senha = tk.Entry(app, show="*", bg="white", bd=2, relief="solid", justify="center")
    entry_senha.pack(padx=5, pady=5)

    tk.Button(app, text="Extrair Lista", command=entrar_lm_e_enviar_para_o_excel, width=20, bg="gold", fg="black").pack(pady=10)

    app.mainloop()
baixar_desenhos()
